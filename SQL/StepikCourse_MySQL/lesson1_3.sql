-- Отобрать различные (уникальные) элементы столбца amount таблицы book.

SELECT amount                         -- GROUP BY и DISTINCT отображают уникальные значения из таблицы 
FROM book                             -- разница лишь в синтаксисе, как показано в примерах
GROUP BY amount

-- ИЛИ

SELECT DISTINCT amount
FROM book


-- Посчитать, количество различных книг и количество экземпляров книг каждого автора , хранящихся на складе.  Столбцы назвать Автор, Различных_книг и Количество_экземпляров соответственно.

SELECT author AS Автор,
COUNT(amount) AS Различных_книг,
SUM(amount) AS Количество_экземпляров
FROM book                                 -- COUNT() считает количество записей в группе
GROUP BY author;                          -- SUM() считает сумму этих записей в группе


-- Вывести фамилию и инициалы автора, минимальную, максимальную и среднюю цену книг каждого автора. Вычисляемые столбцы назвать Минимальная_цена, Максимальная_цена и Средняя_цена соответственно.

SELECT author,
MIN(price) AS Минимальная_цена,
MAX(price) AS Максимальная_цена, 
AVG(price) AS Средняя_цена
FROM book
GROUP BY author;


-- Для каждого автора вычислить суммарную стоимость книг S (имя столбца Стоимость), а также вычислить налог на добавленную стоимость  для полученных сумм (имя столбца НДС ), который включен в стоимость и составляет k = 18%,  а также стоимость книг  (Стоимость_без_НДС) без него. Значения округлить до двух знаков после запятой. В запросе для расчета НДС(tax)  и Стоимости без НДС(S_without_tax) использовать следующие формулы: tax = (S * (k / 100)) / (1 + k / 100); S_without_tax = S / (1 + (k / 100))


SELECT author,
SUM(price * amount) AS Стоимость,
ROUND((SUM(price * amount) * (18 / 100)) / (1 + (18 / 100)), 2) AS НДС,
ROUND(SUM(price * amount) / (1 + (18 / 100)), 2) AS Стоимость_без_НДС
FROM book
GROUP BY author;


-- Вывести  цену самой дешевой книги, цену самой дорогой и среднюю цену уникальных книг на складе. Названия столбцов Минимальная_цена, Максимальная_цена, Средняя_цена соответственно. Среднюю цену округлить до двух знаков после запятой.

SELECT MIN(price) AS Минимальная_цена,               --Групповые функции позволяют вычислять итоговые значения по всей таблице. Например, можно 
MAX(price) AS Максимальная_цена,                     --посчитать общее количество книг на складе, вычислить суммарную стоимость и пр. Для этого 
ROUND(AVG(DISTINCT price), 2) AS Средняя_цена        --после ключевого слова SELECT указывается групповая функция для выражения или имени 
FROM book;                                           --столбца, а ключевые слова GROUP BY опускаются.


-- Вычислить среднюю цену и суммарную стоимость тех книг, количество экземпляров которых принадлежит интервалу от 5 до 14, включительно. Столбцы назвать Средняя_цена и Стоимость, значения округлить до 2-х знаков после запятой.

SELECT ROUND(AVG(price), 2) AS Средняя_цена,
SUM(price * amount) AS Стоимость
FROM book
WHERE amount BETWEEN 5 AND 14;


-- Посчитать стоимость всех экземпляров каждого автора без учета книг «Идиот» и «Белая гвардия». В результат включить только тех авторов, у которых суммарная стоимость книг (без учета книг «Идиот» и «Белая гвардия») более 5000 руб. Вычисляемый столбец назвать Стоимость. Результат отсортировать по убыванию стоимости.

-- В запросы с групповыми функциями можно включать условие отбора строк, которое в обычных запросах записывается после WHERE. В запросах с групповыми функциями вместо WHERE используется ключевое слово HAVING , которое размещается после оператора GROUP BY.

SELECT author,
SUM(price * amount) AS Стоимость
FROM book
WHERE title <> "Идиот" AND title <> "Белая гвардия"
GROUP BY author
HAVING SUM(price * amount) > 5000
ORDER BY Стоимость DESC;

--WHERE и HAVING могут использоваться в одном запросе. При этом необходимо учитывать порядок выполнения SQL запроса на выборку на СЕРВЕРЕ:

--FROM
--WHERE
--GROUP BY
--HAVING
--SELECT
--ORDER BY

--Важно! Порядок ВЫПОЛНЕНИЯ запросов - это не порядок ЗАПИСИ ключевых слов в запросе на выборку. Порядок записи (синтаксис запроса) остается таким же, как рассматривался ранее в курсе. Порядок ВЫПОЛНЕНИЯ  нужен для того, чтобы понять, почему, например, в WHERE нельзя использовать имена выражений из SELECT. Просто SELECT выполняется компилятором позже, чем WHERE, поэтому ему неизвестно, какое там выражение написано.

-- WHERE ВСЕГДА выполняется ДО группировки (GROUP BY), а HAVING ПОСЛЕ.  WHERE читает все строки ПЕРВОНАЧАЛЬНОЙ таблицы, в то время как HAVING читает строки уже СГРУППИРОВАННОЙ таблицы (вернее, не таблицы, а результата группировки ПЕРВОНАЧАЛЬНОЙ таблицы).